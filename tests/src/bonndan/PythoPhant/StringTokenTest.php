<?php
namespace PythoPhant;

require_once dirname(__FILE__) . '/bootstrap.php';

/**
 * Test class for Parser.
 * Generated by PHPUnit on 2012-01-21 at 18:29:24.
 */
class StringTokenTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var StringToken
     */
    private $token;
    
    public function setUp()
    {
        parent::setUp();
        $this->token = new StringToken('T_STRING', 'a', 1);
    }

    /**
     * @return TokenList
     */
    private function getTokenList()
    {
        $list = new TokenList();
        
        return $list;
    }
    
    public function testBetweenReturnValueAndNull()
    {
        $list = $this->getTokenList();
        
        $list->pushToken(new StringToken('T_RETURNVALUE', 'string', 1));
        $list->pushToken($this->token);
        
        $this->token->affectTokenList($list);
        $this->assertEquals('$a', $this->token->getContent());
    }
    
    public function testBetweenNullAndAssign()
    {
        $list = $this->getTokenList();
        $list->pushToken($this->token);
        $list->pushToken(new StringToken('T_ASSIGN', '=', 1));
        
        
        $this->token->affectTokenList($list);
        $this->assertEquals('$a', $this->token->getContent());
    }
    
    public function testClassVarNameIsVariable()
    {
        $list = new TokenList();
        $token = new StringToken('T_STRING', 'myVar', 1);
                $content = 
"/**
 * test
 *
 * @var string
 */";
        $list->pushToken(new DocCommentToken('T_DOC_COMMENT', $content, 1));
        $list->pushToken(new NewLineToken('T_NEWLINE', PHP_EOL, 1));
        $list->pushToken(IndentationToken::create(1));
        $list->pushToken(new ReturnValueToken('T_RETURNVALUE', 'private', 1));
        $list->pushToken($token);
        
        $token->affectTokenList($list);
        $this->assertContains('$', $token->getContent());
    }
    
    public function testClassMethodNameIsNotVariable()
    {
        $list = new TokenList();
        $token = new StringToken('T_STRING', 'myFunction', 1);
                $content = 
"/**
 * test
 *
 * @return string
 */";
        $list->pushToken(new DocCommentToken('T_DOC_COMMENT', $content, 1));
        $list->pushToken(new NewLineToken('T_NEWLINE', PHP_EOL, 1));
        $list->pushToken(IndentationToken::create(1));
        $list->pushToken(new ReturnValueToken('T_RETURNVALUE', 'private', 1));
        $list->pushToken($token);
        
        $token->affectTokenList($list);
        $this->assertNotContains('$', $token->getContent());
    }
}