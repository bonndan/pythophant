<?php 
namespace PythoPhant\Core;

require_once dirname(__FILE__) . '/bootstrap.php';

/**
 * Test class for Parser.
 * Generated by PHPUnit on 2012-01-21 at 18:29:24.
 */
class DirectoryWatcherTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var DirectoryWatcher
     */
    private $watcher;

    public function setup()
    {
        parent::setup();
        $this->watcher = new DirectoryWatcher;
    }

    public function testAddDirectory()
    {
        $this->watcher->addDirectory(dirname(__FILE__));
        $this->assertAttributeContains(dirname(__FILE__), 'directories', $this->watcher);
    }

    public function testAddDirectoryFails()
    {
        $mock = $this->getMock("PythoPhant\Event\Observer");
        $mock->expects($this->once())->method('update');
        $this->watcher->attach($mock);
        $this->watcher->addDirectory('xxx');
    }

    public function testRun()
    {
        $this->watcher->addDirectory(dirname(PATH_TEST). DIRECTORY_SEPARATOR . '/fixtures');
        $this->watcher->run();
        $filename = dirname(PATH_TEST) . '/fixtures/test.pp';
        $this->assertArrayHasKey($filename, $this->watcher->getWatchedFiles());
        $this->assertContains(filemtime($filename), $this->watcher->getWatchedFiles());
    }
    
    public function testUpdate()
    {
        $observer = $this->getMock("PythoPhant\Event\Observer");
        $this->watcher->attach($observer);
        $this->watcher->setPollingInterval(500);
        
        $event = new \PythoPhant\Event\ScanTrigger();
        $observer->expects($this->once())
            ->method('update')
            ->will($this->returnCallback(array($this, 'update')));
        $this->watcher->update($event);
    }

    public function update($ev)
    {
        $this->assertInstanceOf("PythoPhant\Event\ScanTrigger", $ev);
    }
}

