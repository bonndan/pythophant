<?php
namespace PythoPhant\Core;

require_once dirname(__FILE__) . '/bootstrap.php';

/**
 * Test class for Parser.
 * Generated by PHPUnit on 2012-01-21 at 18:29:24.
 */
class ConverterTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Converter 
     */
    private $converter;
    private $scanner;
    private $parser;
    private $renderer;
    
    public function setup()
    {
        parent::setUp();
        $this->scanner = $this->getMockBuilder("PythoPhant\Core\Scanner")->disableOriginalConstructor()->getMock();
        $this->parser = $this->getMockBuilder("PythoPhant\Core\Parser")->disableOriginalConstructor()->getMock();
        $this->renderer = $this->getMock("PythoPhant\Renderer\Helper");
        $this->converter = new Converter($this->scanner, $this->parser, $this->renderer);
    }
    
    public function testInjection()
    {
        $this->assertAttributeEquals($this->scanner, 'scanner', $this->converter);
        $this->assertAttributeEquals($this->parser, 'parser', $this->converter);
        $this->assertAttributeEquals($this->renderer, 'renderer', $this->converter);
    }
    
    public function testConvert()
    {
        $source = $this->getMockBuilder("PythoPhant\Core\SourceFile")->disableOriginalConstructor()->getMock();
        $this->scanner->expects($this->once())->method('scanSource');
        $this->scanner->expects($this->once())
            ->method('getTokenList')
            ->will($this->returnValue($this->getMock("PythoPhant\TokenList")));
        $this->parser->expects($this->once())->method('parseElement');
        $this->parser->expects($this->once())
            ->method('getElement')
            ->will($this->returnValue($this->getMock("PythoPhant\Reflection\Element")));
        $this->renderer->expects($this->once())->method('enableDebugging');
        $this->renderer->expects($this->once())->method('setReflectionElement');
        $this->renderer->expects($this->once())->method('addWaterMark');
        $this->renderer->expects($this->once())->method('getPHPSource');
        $source->expects($this->once())->method('writeTarget');
        
        $this->converter->convert($source);
    }
    
    public function testConvertWithScannerException()
    {
        $source = $this->getMockBuilder("PythoPhant\Core\SourceFile")
            ->disableOriginalConstructor()->getMock();
        $this->scanner->expects($this->once())
            ->method('scanSource')
            ->will($this->throwException(new \PythoPhant\Exception('test', 1)));
        
        $observer = $this->getMock("PythoPhant\Event\Observer");
        $this->converter->attach($observer);
        $observer->expects($this->once())
            ->method('update');
        $this->converter->convert($source);
    }
    
    public function testConvertWithParserException()
    {
        $source = $this->getMockBuilder("PythoPhant\Core\SourceFile")
            ->disableOriginalConstructor()->getMock();
        
        $this->scanner->expects($this->once())
            ->method('getTokenList')
            ->will($this->returnValue($this->getMock("PythoPhant\TokenList")));
        
        $this->parser->expects($this->once())
            ->method('parseElement')
            ->will($this->throwException(new \PythoPhant\Exception('test', 1)));
        
        $observer = $this->getMock("PythoPhant\Event\Observer");
        $this->converter->attach($observer);
        $observer->expects($this->once())
            ->method('update');
        $this->converter->convert($source);
    }
    
    /**
     * ensure that update() triggers conversion 
     */
    public function testUpdate()
    {
        $mock = $this->getMockBuilder("PythoPhant\Event\FileChanged")
            ->disableOriginalConstructor()
            ->getMock();
        $mock->expects($this->once())->method('getPath')
            ->will($this->returnValue(dirname(PATH_TEST) . '/sources/test.pp'));
        
        $this->scanner->expects($this->once())
            ->method('getTokenList')
            ->will($this->returnValue($this->getMock('TokenList')));
        $this->parser->expects($this->once())
            ->method('getElement')
            ->will($this->returnValue($this->getMock("PythoPhant\Reflection\Element")));
        $res = $this->converter->update($mock);
        $this->assertEquals($this->converter, $res);
    }
}