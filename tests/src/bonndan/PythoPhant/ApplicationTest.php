<?php
namespace PythoPhant;

require_once dirname(__FILE__) . '/bootstrap.php';

/**
 * Test class for Parser.
 * Generated by PHPUnit on 2012-01-21 at 18:29:24.
 */
class ApplicationTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Application 
     */
    private $pp;
    
    public function setup()
    {
        $this->pp = new Application();
    }
    
    public function testInjection()
    {
        $this->assertAttributeInstanceOf("PythoPhant\Event\Proxy", 'eventProxy', $this->pp);
        $this->assertAttributeInstanceOf("PythoPhant\Core\Converter", 'converter', $this->pp);
    }
    
    public function testProxyReceivesObservers()
    {
        $proxy = $this->getMock("PythoPhant\Event\Proxy");
        $proxy->expects($this->exactly(2))
            ->method('attach');
        $app = new Application(null, null, $proxy);
    }
    
    public function testMainWithNothingFindsProject()
    {
        $proxy = $this->getMock("PythoPhant\Event\Proxy");
        
        $watcher = $this->getMock("PythoPhant\Core\DirectoryWatcher");
        $watcher->expects($this->once())->method('attach');
        $this->pp = new Application(null, $watcher, $proxy);
        
        $cwd = dirname(PATH_TEST);
        chdir($cwd);
        
        $watcher->expects($this->exactly(3))->method('addDirectory');
        $watcher->expects($this->once())->method('run');
        $this->pp->setConfigDir($cwd);
        $this->pp->main(array());
        
        $project = $this->pp->getProject();
        
        $this->assertInstanceOf("PythoPhant\Core\Project", $project);
    }
    
    public function testMainWithNothingLooksForProjectAndStartsWatching()
    {
        $watcher = $this->getMock("PythoPhant\Core\DirectoryWatcher");
        $watcher->expects($this->once())->method('attach');
        $this->pp = new Application(null, $watcher);
        
        chdir(__DIR__);
        
        $watcher->expects($this->any())->method('addDirectory');
        $watcher->expects($this->once())->method('run');
        $this->pp->main(array());
        
        $project = $this->pp->getProject();
        $this->assertInstanceOf("PythoPhant\Core\Project", $project);
    }
    
    /**
     * 
     */
    public function _testMainWithFileConvertsFile()
    {
        $converter = $this->getMockBuilder("PythoPhant\Core\Converter")
            ->disableOriginalConstructor()->getMock();
        $converter->expects($this->once())->method('convert');
        $this->pp = new Application($converter);
        
        $cwd = dirname(dirname(__DIR__));
        $this->pp->main(array(0, $cwd . DIRECTORY_SEPARATOR . 'sources/test.pp'));
    }
    
    public function testMainWithDirStartsWatchingOnlyDir()
    {
        $watcher = $this->getMock("PythoPhant\Core\DirectoryWatcher");
        $dir = __DIR__;
        $watcher->expects($this->once())->method('addDirectory')->with($dir);
        $this->pp = new Application(null, $watcher);
        
        $cwd = dirname(dirname(__DIR__));
        chdir($cwd);
        $this->pp->main(array(0, $dir));
    }
    
    public function testConvert()
    {
        $converter = $this->getMockBuilder("PythoPhant\Core\Converter")
            ->disableOriginalConstructor()->getMock();
        $app = new Application($converter);
        $converter->expects($this->once())
            ->method('convert');
        $app->convert(__FILE__);
    }
}